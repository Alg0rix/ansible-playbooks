---
- name: Comprehensive Linux Host Deep Diagnosis and Analysis
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  gather_facts: yes
  vars:
    diagnosis_output_file: "/tmp/linux_comprehensive_diagnosis.json"
    analysis_depth: 7
    warning_thresholds:
      cpu_usage: 80
      memory_usage: 85
      disk_usage: 90
      load_1min: 5.0
      load_5min: 3.0
      load_15min: 2.0
    critical_files:
      - "/etc/passwd"
      - "/etc/shadow"
      - "/etc/sudoers"
      - "/etc/ssh/sshd_config"
      - "/etc/hosts.allow"
      - "/etc/hosts.deny"
    log_files:
      - "/var/log/syslog"
      - "/var/log/messages"
      - "/var/log/auth.log"
      - "/var/log/kern.log"
      - "/var/log/dmesg"
      - "/var/log/faillog"
      - "/var/log/secure"

  tasks:
    - name: Initialize comprehensive diagnosis data structure
      set_fact:
        diagnosis_data:
          metadata:
            timestamp: "{{ ansible_date_time.iso8601 }}"
            hostname: "{{ ansible_facts.hostname }}"
            fqdn: "{{ ansible_facts.fqdn }}"
            ansible_managed: true
            analysis_version: "2.0"
          system_profile:
            os_info:
              distribution: "{{ ansible_facts.distribution }}"
              version: "{{ ansible_facts.distribution_version }}"
              architecture: "{{ ansible_facts.architecture }}"
              kernel: "{{ ansible_facts.kernel }}"
              kernel_version: "{{ ansible_facts.kernel_version }}"
            hardware:
              cpu_cores: "{{ ansible_facts.processor_cores }}"
              cpu_count: "{{ ansible_facts.processor_count }}"
              memory_total_mb: "{{ ansible_facts.memtotal_mb }}"
              memory_total_gb: "{{ (ansible_facts.memtotal_mb / 1024) | round(2) }}"
              swap_total_mb: "{{ ansible_facts.swaptotal_mb }}"
              virtualization_type: "{{ ansible_facts.virtualization_type }}"
              product_name: "{{ ansible_facts.product_name }}"
              serial_number: "{{ ansible_facts.serial_number | default('N/A') }}"
          deep_analysis: {}
          security_audit: {}
          performance_deep_dive: {}
          network_analysis: {}
          filesystem_analysis: {}
          application_analysis: {}
          recommendations: {}
          risk_assessment: {}

    - name: Deep System Analysis
      block:
        - name: Analyze kernel parameters
          shell: |
            echo '{"kernel_parameters": {'
            echo '  "oom_score_adj_min": "'$(sysctl vm.oom_score_adj_min | cut -d' ' -f3)'",'
            echo '  "swappiness": "'$(sysctl vm.swappiness | cut -d' ' -f3)'",'
            echo '  "vfs_cache_pressure": "'$(sysctl vm.vfs_cache_pressure | cut -d' ' -f3)'",'
            echo '  "dirty_ratio": "'$(sysctl vm.dirty_ratio | cut -d' ' -f3)'",'
            echo '  "dirty_background_ratio": "'$(sysctl vm.dirty_background_ratio | cut -d' ' -f3)'",'
            echo '  "overcommit_memory": "'$(sysctl vm.overcommit_memory | cut -d' ' -f3)'"'
            echo '}}'
          register: kernel_params

        - name: Analyze loaded kernel modules
          shell: |
            echo '{"loaded_modules": {'
            lsmod | tail -n +2 | head -20 | while read module size used_by dependencies; do
              echo "  \"$module\": {\"size\": \"$size\", \"used_by\": \"$used_by\", \"dependencies\": \"$dependencies\"},"
            done | sed '$s/,$//'
            echo '}}'
          register: kernel_modules

        - name: Check system limits
          shell: |
            echo '{"system_limits": {'
            echo '  "max_processes": "'$(ulimit -u)'",'
            echo '  "max_open_files": "'$(ulimit -n)'",'
            echo '  "max_memory_size": "'$(ulimit -v)'",'
            echo '  "core_file_size": "'$(ulimit -c)'"'
            echo '}}'
          register: system_limits

        - name: Add deep system analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'deep_analysis': {
                'kernel_parameters': kernel_params.stdout | from_json,
                'kernel_modules': kernel_modules.stdout | from_json,
                'system_limits': system_limits.stdout | from_json
              }
            }) }}"

    - name: Filesystem Deep Analysis
      block:
        - name: Analyze filesystem health
          shell: |
            echo '{"filesystem_health": {'
            for fs in $(df -h | awk 'NR>1 {print $6}' | head -10); do
              if [ -d "$fs" ]; then
                echo "  \"$fs\": {"
                echo "    \"total\": \"$(df -h $fs | awk 'NR==2 {print $2}')\","
                echo "    \"used\": \"$(df -h $fs | awk 'NR==2 {print $3}')\","
                echo "    \"available\": \"$(df -h $fs | awk 'NR==2 {print $4}')\","
                echo "    \"usage_percent\": \"$(df -h $fs | awk 'NR==2 {print $5}')\","
                echo "    \"inode_usage\": \"$(df -i $fs | awk 'NR==2 {print $5}')\","
                echo "    \"filesystem_type\": \"$(df -T $fs | awk 'NR==2 {print $2}')\","
                echo "    \"mount_options\": \"$(findmnt -n -o OPTIONS $fs)\""
                echo "  },"
              fi
            done | sed '$s/,$//'
            echo '}}'
          register: filesystem_health

        - name: Check for filesystem errors
          shell: |
            echo '{"filesystem_errors": {'
            dmesg | grep -i "ext.*error\|filesystem.*error\|i.*o.*error" | tail -10 | while read line; do
              echo "  \"error_$(date +%s)\": \"$line\","
            done | sed '$s/,$//'
            echo '}}'
          register: filesystem_errors
          ignore_errors: yes

        - name: Analyze disk I/O performance
          shell: |
            echo '{"disk_io_stats": {'
            # Try iostat first, fallback to /proc/diskstats
            if command -v iostat >/dev/null 2>&1; then
              iostat -d -x 1 2 2>/dev/null | tail -n +4 | head -20 | while read device tps kb_read kb_wrtn kb_read_s kb_wrtn_s await svctm util; do
                if [ "$device" != "" ] && [ "$device" != "Device" ]; then
                  echo "  \"$device\": {"
                  echo "    \"tps\": \"$tps\","
                  echo "    \"kb_read_s\": \"$kb_read_s\","
                  echo "    \"kb_wrtn_s\": \"$kb_wrtn_s\","
                  echo "    \"await\": \"$await\","
                  echo "    \"util_percent\": \"$util\""
                  echo "  },"
                fi
              done | sed '$s/,$//'
            else
              # Fallback to /proc/diskstats
              awk '{print $3}' /proc/diskstats | sort | uniq | head -10 | while read device; do
                if [ -b "/dev/$device" ]; then
                  echo "  \"$device\": {"
                  echo "    \"status\": \"available\","
                  echo "    \"iostat_not_available\": \"true\""
                  echo "  },"
                fi
              done | sed '$s/,$//'
            fi
            echo '}}'
          register: disk_io_stats
          ignore_errors: yes

        - name: Add filesystem analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'filesystem_analysis': {
                'filesystem_health': filesystem_health.stdout | from_json,
                'filesystem_errors': filesystem_errors.stdout | from_json if not filesystem_errors.failed else {},
                'disk_io_stats': disk_io_stats.stdout | from_json if not disk_io_stats.failed else {}
              }
            }) }}"

    - name: Network Deep Dive Analysis
      block:
        - name: Analyze network interface errors and statistics
          shell: |
            echo '{"interface_errors": {'
            # Get interface statistics
            ip -s link show | while IFS= read -r line; do
              if [[ $line =~ ^[0-9]+:[[:space:]]+([^:]+): ]]; then
                iface="${BASH_REMATCH[1]}"
                echo "  \"$iface\": {"
              elif [[ $line =~ [[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+) ]]; then
                echo "    \"rx_bytes\": \"${BASH_REMATCH[1]}\","
                echo "    \"rx_packets\": \"${BASH_REMATCH[2]}\","
                echo "    \"rx_errors\": \"${BASH_REMATCH[3]}\","
                echo "    \"rx_dropped\": \"${BASH_REMATCH[4]}\","
                echo "    \"rx_overruns\": \"${BASH_REMATCH[5]}\""
              elif [[ $line =~ [[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9]+) ]] && [[ -n "$iface" ]]; then
                echo "    \"tx_bytes\": \"${BASH_REMATCH[1]}\","
                echo "    \"tx_packets\": \"${BASH_REMATCH[2]}\","
                echo "    \"tx_errors\": \"${BASH_REMATCH[3]}\","
                echo "    \"tx_dropped\": \"${BASH_REMATCH[4]}\","
                echo "    \"tx_overruns\": \"${BASH_REMATCH[5]}\""
                echo "  },"
                iface=""
              fi
            done | sed '$s/,$//'
            echo '}}'
          register: interface_errors

        - name: Analyze network connection states
          shell: |
            echo '{"connection_states": {'
            netstat -an | awk '/^tcp/ {print $6}' | sort | uniq -c | while read count state; do
              echo "  \"$state\": \"$count\","
            done | sed '$s/,$//'
            echo '}}'
          register: connection_states

        - name: Check network statistics
          shell: |
            echo '{"network_stats": {'
            echo '  "tcp_retransmission_segments": "'$(cat /proc/net/snmp | grep -A1 TcpRetransSegs | tail -1 | cut -d' ' -f2)'",'
            echo '  "tcp_established_connections": "'$(netstat -an | grep ESTABLISHED | wc -l)'",'
            echo '  "udp_packets_received": "'$(cat /proc/net/udp | wc -l)'",'
            echo '  "packet_loss_rate": "'$(ping -c 4 8.8.8.8 2>/dev/null | grep -oP '\d+% packet loss' | head -1 || echo "N/A")'"'
            echo '}}'
          register: network_stats

        - name: Add network analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'network_analysis': {
                'interface_errors': interface_errors.stdout | from_json,
                'connection_states': connection_states.stdout | from_json,
                'network_stats': network_stats.stdout | from_json
              }
            }) }}"

    - name: Security Hardening Analysis
      block:
        - name: Check SELinux status
          shell: |
            echo '{"selinux_status": {'
            echo '  "enforcing": "'$(getenforce 2>/dev/null || echo "Not installed")'",'
            echo '  "mode": "'$(sestatus 2>/dev/null | grep "Current mode" | cut -d':' -f2 | xargs 2>/dev/null || echo "N/A")'",'
            echo '  "policy": "'$(sestatus 2>/dev/null | grep "Loaded policy" | cut -d':' -f2 | xargs 2>/dev/null || echo "N/A")'"'
            echo '}}'
          register: selinux_status

        - name: Check AppArmor status
          shell: |
            echo '{"apparmor_status": {'
            echo '  "enabled": "'$(systemctl is-active apparmor 2>/dev/null || echo "Not installed")'",'
            echo '  "profiles_loaded": "'$(aa-status 2>/dev/null | grep "profiles are loaded" | cut -d' ' -f1 2>/dev/null || echo "0")'"'
            echo '}}'
          register: apparmor_status

        - name: Analyze user password policies
          shell: |
            echo '{"password_policies": {'
            echo '  "max_password_age": "'$(grep PASS_MAX_DAYS /etc/login.defs | awk '{print $2}')'",'
            echo '  "min_password_length": "'$(grep PASS_MIN_LEN /etc/login.defs | awk '{print $2}')'",'
            echo '  "password_warn_age": "'$(grep PASS_WARN_AGE /etc/login.defs | awk '{print $2}')'",'
            echo '  "users_without_password": "'$(sudo awk -F: '($2 == "" || $2 == "!") {print $1}' /etc/shadow | wc -l)'"'
            echo '}}'
          register: password_policies

        - name: Check critical file permissions
          shell: |
            echo '{"file_permissions": {'
            for file in {{ critical_files | join(' ') }}; do
              if [ -f "$file" ]; then
                echo "  \"$file\": {"
                echo "    \"permissions\": \"$(ls -ld $file | awk '{print $1}')\","
                echo "    \"owner\": \"$(ls -ld $file | awk '{print $3}')\","
                echo "    \"group\": \"$(ls -ld $file | awk '{print $4}')\","
                echo "    \"size\": \"$(ls -lh $file | awk '{print $5}')\""
                echo "  },"
              fi
            done | sed '$s/,$//'
            echo '}}'
          register: file_permissions

        - name: Add security analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'security_audit': {
                'selinux_status': selinux_status.stdout | from_json,
                'apparmor_status': apparmor_status.stdout | from_json,
                'password_policies': password_policies.stdout | from_json,
                'file_permissions': file_permissions.stdout | from_json
              }
            }) }}"

    - name: Application and Process Analysis
      block:
        - name: Analyze top resource consuming processes
          shell: |
            echo '{"top_processes": {'
            echo '  "cpu_consumers": ['
            ps aux --sort=-%cpu | head -11 | tail -10 | awk '{printf "{\"pid\":\"%s\",\"user\":\"%s\",\"cpu\":\"%s\",\"memory\":\"%s\",\"command\":\"%s\"},", $2, $1, $3, $4, $11}' | sed '$s/,$//'
            echo '  ],'
            echo '  "memory_consumers": ['
            ps aux --sort=-%mem | head -11 | tail -10 | awk '{printf "{\"pid\":\"%s\",\"user\":\"%s\",\"cpu\":\"%s\",\"memory\":\"%s\",\"command\":\"%s\"},", $2, $1, $3, $4, $11}' | sed '$s/,$//'
            echo '  ]'
            echo '}}'
          register: top_processes

        - name: Check for zombie and orphaned processes
          shell: |
            echo '{"problem_processes": {'
            echo '  "zombie_count": "'$(ps aux | grep defunct | grep -v grep | wc -l)'",'
            echo '  "orphaned_count": "'$(ps -ef | awk '$3 == 1 && $2 != 1 {print}' | wc -l)'",'
            echo '  "defunct_pids": ['$(ps aux | grep defunct | grep -v grep | awk '{printf "\"%s\",", $2}' | sed 's/,$//')']'
            echo '}}'
          register: problem_processes

        - name: Analyze service dependencies
          shell: |
            echo '{"service_dependencies": {'
            systemctl list-unit-files --type=service --state=enabled | head -20 | while read unit state; do
              if [ "$state" = "enabled" ]; then
                service_name=$(echo $unit | sed 's/.service//')
                echo "  \"$service_name\": {"
                echo "    \"status\": \"$(systemctl is-active $service_name 2>/dev/null || echo 'unknown')\","
                echo "    \"dependencies\": \"$(systemctl show $service_name -p Wants | cut -d'=' -f2 | tr ' ' ',')\""
                echo "  },"
              fi
            done | sed '$s/,$//'
            echo '}}'
          register: service_dependencies

        - name: Add application analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'application_analysis': {
                'top_processes': top_processes.stdout | from_json,
                'problem_processes': problem_processes.stdout | from_json,
                'service_dependencies': service_dependencies.stdout | from_json
              }
            }) }}"

    - name: Performance Deep Dive
      block:
        - name: Analyze memory pressure and swapping
          shell: |
            echo '{"memory_pressure": {'
            echo '  "swap_used_percent": "'$(free | grep Swap | awk '{printf "%.1f", $3/$2*100}')'",'
            echo '  "dirty_pages": "'$(grep Dirty /proc/meminfo | awk '{print $2}')'",'
            echo '  "slab_usage": "'$(grep SReclaimable /proc/meminfo | awk '{print $2}')'",'
            echo '  "page_tables": "'$(grep PageTables /proc/meminfo | awk '{print $2}')'"'
            echo '}}'
          register: memory_pressure

        - name: Check CPU scheduling and load
          shell: |
            echo '{"cpu_analysis": {'
            echo '  "load_average_1min": "'$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f1 | xargs)'",'
            echo '  "load_average_5min": "'$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f2 | xargs)'",'
            echo '  "load_average_15min": "'$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f3 | xargs)'",'
            echo '  "context_switches": "'$(grep ctxt /proc/stat | awk '{print $2}')'",'
            echo '  "interrupts": "'$(grep intr /proc/stat | awk '{print $2}')'"'
            echo '}}'
          register: cpu_analysis

        - name: Add performance analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'performance_deep_dive': {
                'memory_pressure': memory_pressure.stdout | from_json,
                'cpu_analysis': cpu_analysis.stdout | from_json
              }
            }) }}"

    - name: Service Deep Analysis
      block:
        - name: Analyze all services status and health
          shell: |
            echo '{"service_health": {'
            echo '  "all_services": {'
            systemctl list-units --type=service --all --no-pager --no-legend | while read unit load active sub description; do
              if [ "$unit" != "" ] && [[ "$unit" == *.service ]]; then
                service_name=$(echo "$unit" | sed 's/.service//')
                echo "    \"$service_name\": {"
                echo "      \"load\": \"$load\","
                echo "      \"active\": \"$active\","
                echo "      \"sub\": \"$sub\","
                echo "      \"description\": \"$description\""
                echo "    },"
              fi
            done | sed '$s/,$//'
            echo '  },'
            echo '  "service_summary": {'
            echo '    "total_services": "'$(systemctl list-units --type=service --all --no-pager --no-legend | wc -l)'",'
            echo '    "active_services": "'$(systemctl list-units --type=service --state=active --no-pager --no-legend | wc -l)'",'
            echo '    "failed_services": "'$(systemctl list-units --type=service --state=failed --no-pager --no-legend | wc -l)'",'
            echo '    "enabled_services": "'$(systemctl list-unit-files --type=service --state=enabled --no-pager --no-legend | wc -l)'",'
            echo '    "masked_services": "'$(systemctl list-unit-files --type=service --state=masked --no-pager --no-legend | wc -l)'"'
            echo '  }'
            echo '}}'
          register: service_health

        - name: Analyze service dependencies and relationships
          shell: |
            echo '{"service_dependencies": {'
            echo '  "dependency_tree": {'
            systemctl list-unit-files --type=service --state=enabled | head -30 | while read unit state; do
              if [ "$state" = "enabled" ]; then
                service_name=$(echo "$unit" | sed 's/.service//')
                echo "    \"$service_name\": {"
                echo "      \"wants\": [$(systemctl show "$service_name" -p Wants | cut -d'=' -f2 | tr ' ' '\n' | grep -v '^$' | head -10 | while read dep; do echo "\"$dep\","; done | sed '$s/,$//')],"
                echo "      "requires": [$(systemctl show "$service_name" -p Requires | cut -d'=' -f2 | tr ' ' '\n' | grep -v '^$' | head -10 | while read dep; do echo "\"$dep\","; done | sed '$s/,$//')],"
                echo "      "after": [$(systemctl show "$service_name" -p After | cut -d'=' -f2 | tr ' ' '\n' | grep -v '^$' | head -10 | while read dep; do echo "\"$dep\","; done | sed '$s/,$//')],"
                echo "      "before": [$(systemctl show "$service_name" -p Before | cut -d'=' -f2 | tr ' ' '\n' | grep -v '^$' | head -10 | while read dep; do echo "\"$dep\","; done | sed '$s/,$//')]"
                echo "    },"
              fi
            done | sed '$s/,$//'
            echo '  },'
            echo '  "critical_dependencies": {'
            echo '    "network_target": "'$(systemctl is-active network.target 2>/dev/null || echo "unknown")'",'
            echo '    "basic_target": "'$(systemctl is-active basic.target 2>/dev/null || echo "unknown")'",'
            echo '    "multi_user_target": "'$(systemctl is-active multi-user.target 2>/dev/null || echo "unknown")'",'
            echo '    "graphical_target": "'$(systemctl is-active graphical.target 2>/dev/null || echo "unknown")'"'
            echo '  }'
            echo '}}'
          register: service_dependencies

        - name: Analyze service resource usage and performance
          shell: |
            echo '{"service_resources": {'
            echo '  "resource_usage": {'
            # Get top resource-consuming services
            ps aux --sort=-%cpu | awk '{print $1, $11, $3, $4}' | grep -v "COMMAND\|%\|[" | head -20 | while read user command cpu mem; do
              service_name=$(echo "$command" | cut -d'/' -f1 | cut -d'-' -f1 | sed 's/^.*://' | sed 's/\[.*\]//')
              if [ "$service_name" != "" ] && [ "$service_name" != "ps" ] && [ "$service_name" != "awk" ]; then
                echo "    \"$service_name\": {"
                echo "      \"cpu_percent\": \"$cpu\","
                echo "      \"memory_percent\": \"$mem\","
                echo "      \"user\": \"$user\""
                echo "    },"
              fi
            done | sed '$s/,$//'
            echo '  },'
            echo '  "service_logs_analysis": {'
            echo '    "recent_errors": {'
            for service in sshd rsyslog cron network systemd-logind; do
              if systemctl is-active "$service" >/dev/null 2>&1; then
                errors=$(journalctl -u "$service" -n 100 --no-pager | grep -i "error\|failed\|critical" | wc -l)
                echo "      \"$service\": \"$errors\","
              fi
            done | sed '$s/,$//'
            echo '    },'
            echo '    "warning_count": {'
            for service in sshd rsyslog cron network systemd-logind; do
              if systemctl is-active "$service" >/dev/null 2>&1; then
                warnings=$(journalctl -u "$service" -n 100 --no-pager | grep -i "warning\|warn" | wc -l)
                echo "      \"$service\": \"$warnings\","
              fi
            done | sed '$s/,$//'
            echo '    }'
            echo '  }'
            echo '}}'
          register: service_resources

        - name: Analyze service startup performance and timing
          shell: |
            echo '{"service_performance": {'
            echo '  "startup_times": {'
            systemd-analyze | head -10 | while read line; do
              if [[ $line == *"Startup finished"* ]]; then
                echo "    \"total_startup_time\": \"$line\","
              elif [[ $line == *"kernel"* ]] || [[ $line == *"initrd"* ]] || [[ $line == *"userspace"* ]]; then
                echo "    \"$(echo $line | awk '{print $1}')\": \"$(echo $line | awk '{for(i=2;i<=NF;i++) printf $i" "}')\","
              fi
            done | sed '$s/,$//'
            echo '  },'
            echo '  "slowest_services": {'
            systemd-analyze blame | head -20 | while read time service; do
              if [ "$time" != "" ] && [ "$service" != "" ]; then
                service_name=$(echo "$service" | sed 's/.service//')
                echo "    \"$service_name\": \"$time\","
              fi
            done | sed '$s/,$//'
            echo '  },'
            echo '  "boot_analysis": {'
            echo '    "critical_path_time": \"$(systemd-analyze critical-chain | head -1 | awk '{print $5" "$6" "$7}')\""
            echo '  }'
            echo '}}'
          register: service_performance
          ignore_errors: yes

        - name: Add service analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'service_analysis': {
                'service_health': service_health.stdout | from_json,
                'service_dependencies': service_dependencies.stdout | from_json,
                'service_resources': service_resources.stdout | from_json,
                'service_performance': service_performance.stdout | from_json if not service_performance.failed else {}
              }
            }) }}"

    - name: Additional Deep Analysis
      block:
        - name: Analyze memory fragmentation and swap usage
          shell: |
            echo '{"memory_deep_analysis": {'
            echo '  "swap_info": {'
            echo '    "swap_total_mb": "'$(free -m | grep Swap | awk '{print $2}')'",'
            echo '    "swap_used_mb": "'$(free -m | grep Swap | awk '{print $3}')'",'
            echo '    "swap_free_mb": "'$(free -m | grep Swap | awk '{print $4}')'",'
            echo '    "swap_usage_percent": "'$(free -m | grep Swap | awk '{if ($2>0) printf "%.1f", $3*100/$2; else print "0"}')'"'
            echo '  },'
            echo '  "memory_zones": {'
            echo '    "dma": "'$(grep -A 3 "DMA" /proc/zoneinfo | head -1 | awk '{print $2}')'",'
            echo '    "dma32": "'$(grep -A 3 "DMA32" /proc/zoneinfo | head -1 | awk '{print $2}')'",'
            echo '    "normal": "'$(grep -A 3 "Normal" /proc/zoneinfo | head -1 | awk '{print $2}')'"'
            echo '  },'
            echo '  "vm_statistics": {'
            echo '    "nr_free_pages": "'$(grep nr_free_pages /proc/vmstat | awk '{print $2}')'",'
            echo '    "nr_inactive_anon": "'$(grep nr_inactive_anon /proc/vmstat | awk '{print $2}')'",'
            echo '    "nr_active_anon": "'$(grep nr_active_anon /proc/vmstat | awk '{print $2}')'",'
            echo '    "nr_inactive_file": "'$(grep nr_inactive_file /proc/vmstat | awk '{print $2}')'",'
            echo '    "nr_active_file": "'$(grep nr_active_file /proc/vmstat | awk '{print $2}')'"'
            echo '  }'
            echo '}}'
          register: memory_deep_analysis

        - name: Analyze security vulnerabilities and compliance
          shell: |
            echo '{"security_compliance": {'
            echo '  "ssh_config_check": {'
            echo '    "permit_root_login": "'$(grep -i "^PermitRootLogin" /etc/ssh/sshd_config 2>/dev/null | cut -d' ' -f2- | tr -d '"' || echo "not_found")'",'
            echo '    "password_auth": "'$(grep -i "^PasswordAuthentication" /etc/ssh/sshd_config 2>/dev/null | cut -d' ' -f2- | tr -d '"' || echo "not_found")'",'
            echo '    "port": "'$(grep -i "^Port" /etc/ssh/sshd_config 2>/dev/null | cut -d' ' -f2 || echo "22")'"'
            echo '  },'
            echo '  "system_updates": {'
            echo '    "last_update_check": "'$(find /var/log -name "yum.log" -o -name "apt.log" -o -name "dnf.log" -mtime -30 2>/dev/null | head -1 | xargs ls -la 2>/dev/null | awk '{print $6" "$7" "$8}' || echo "unknown")'",'
            echo '    "package_manager": "'$(which yum >/dev/null 2>&1 && echo "yum" || (which dnf >/dev/null 2>&1 && echo "dnf") || (which apt >/dev/null 2>&1 && echo "apt") || echo "unknown")'"'
            echo '  },'
            echo '  "firewall_status": {'
            echo '    "firewalld": "'$(systemctl is-active firewalld 2>/dev/null || echo "not_installed")'",'
            echo '    "iptables": "'$(systemctl is-active iptables 2>/dev/null || echo "not_installed")'",'
            echo '    "ufw": "'$(systemctl is-active ufw 2>/dev/null || echo "not_installed")'"'
            echo '  }'
            echo '}}'
          register: security_compliance

        - name: Add additional analysis to diagnosis data
          set_fact:
            diagnosis_data: "{{ diagnosis_data | combine({
              'memory_deep_analysis': memory_deep_analysis.stdout | from_json,
              'security_compliance': security_compliance.stdout | from_json
            }) }}"

    - name: Generate Intelligent Risk Assessment
      set_fact:
        diagnosis_data: "{{ diagnosis_data | combine({
          'risk_assessment': {
            'overall_risk_level': 'low',
            'security_risks': [
              'SELinux is disabled' if diagnosis_data.security_audit.selinux_status.selinux_status.enforcing == 'Disabled' else '',
              'No firewall detected' if (diagnosis_data.security_compliance.firewall_status.firewalld == 'not_installed' and diagnosis_data.security_compliance.firewall_status.iptables == 'not_installed' and diagnosis_data.security_compliance.firewall_status.ufw == 'not_installed') else '',
              'SSH root login enabled' if diagnosis_data.security_compliance.ssh_config_check.permit_root_login == 'yes' else ''
            ] | select('string') | list,
            'performance_risks': [
              'High CPU usage detected' if diagnosis_data.performance_deep_dive.cpu_analysis.cpu_analysis.load_average_1min | float > warning_thresholds.load_1min else '',
              'High memory pressure' if diagnosis_data.memory_deep_analysis.memory_deep_analysis.swap_info.swap_usage_percent | float > 50 else '',
              'System limits may be too low' if diagnosis_data.deep_analysis.system_limits.system_limits.max_open_files | int < 65536 else '',
              'Service resource usage high' if diagnosis_data.service_analysis.service_resources.service_resources.resource_usage | dict2items | map(attribute='value') | selectattr('cpu_percent', 'float') | select('>=', 10) | list | length > 0 else '',
              'Slow startup services detected' if diagnosis_data.service_analysis.service_performance.service_performance.slowest_services | dict2items | map(attribute='value') | map('split', ' ') | map('first') | map('float') | select('>=', 5) | list | length > 0 else ''
            ] | select('string') | list,
            'stability_risks': [
              'Zombie processes detected' if diagnosis_data.application_analysis.problem_processes.problem_processes.zombie_count | int > 0 else '',
              'Filesystem errors present' if diagnosis_data.filesystem_analysis.filesystem_errors.filesystem_errors | length > 0 else '',
              'Network interface errors detected' if diagnosis_data.network_analysis.interface_errors.interface_errors | length > 0 else '',
              'Failed services detected' if diagnosis_data.service_analysis.service_health.service_health.service_summary.failed_services | int > 0 else '',
              'Critical service errors in logs' if diagnosis_data.service_analysis.service_resources.service_resources.service_logs_analysis.recent_errors | dict2items | map(attribute='value') | select('>=', 5) | list | length > 0 else '',
              'Service dependency issues' if diagnosis_data.service_analysis.service_dependencies.service_dependencies.critical_dependencies.network_target != 'active' else ''
            ] | select('string') | list
          }
        }) }}"

    - name: Generate Detailed Recommendations
      set_fact:
        diagnosis_data: "{{ diagnosis_data | combine({
          'recommendations': {
            'immediate_actions': [
              'Enable SELinux for enhanced security' if diagnosis_data.security_audit.selinux_status.selinux_status.enforcing == 'Disabled' else '',
              'Configure and enable firewall' if (diagnosis_data.security_compliance.firewall_status.firewalld == 'not_installed' and diagnosis_data.security_compliance.firewall_status.iptables == 'not_installed' and diagnosis_data.security_compliance.firewall_status.ufw == 'not_installed') else '',
              'Disable SSH root login' if diagnosis_data.security_compliance.ssh_config_check.permit_root_login == 'yes' else '',
              'Restart failed services' if diagnosis_data.service_analysis.service_health.service_health.service_summary.failed_services | int > 0 else '',
              'Investigate service errors in logs' if diagnosis_data.service_analysis.service_resources.service_resources.service_logs_analysis.recent_errors | dict2items | map(attribute='value') | select('>=', 5) | list | length > 0 else ''
            ] | select('string') | list,
            'performance_optimizations': [
              'Increase system open files limit' if diagnosis_data.deep_analysis.system_limits.system_limits.max_open_files | int < 65536 else '',
              'Optimize kernel swappiness' if diagnosis_data.deep_analysis.kernel_parameters.kernel_parameters.swappiness | int > 60 else '',
              'Monitor swap usage - consider adding more memory' if diagnosis_data.memory_deep_analysis.memory_deep_analysis.swap_info.swap_usage_percent | float > 50 else '',
              'Optimize slow startup services' if diagnosis_data.service_analysis.service_performance.service_performance.slowest_services | dict2items | map(attribute='value') | map('split', ' ') | map('first') | map('float') | select('>=', 5) | list | length > 0 else '',
              'Monitor high-resource services' if diagnosis_data.service_analysis.service_resources.service_resources.resource_usage | dict2items | map(attribute='value') | selectattr('cpu_percent', 'float') | select('>=', 10) | list | length > 0 else ''
            ] | select('string') | list,
            'security_hardening': [
              'Regular system updates recommended' if diagnosis_data.security_compliance.system_updates.last_update_check == 'unknown' else '',
              'Implement intrusion detection system' if diagnosis_data.security_audit.selinux_status.selinux_status.enforcing == 'Disabled' else '',
              'Harden SSH configuration' if diagnosis_data.security_compliance.ssh_config_check.password_auth == 'yes' else '',
              'Review service permissions and access controls' if diagnosis_data.service_analysis.service_health.service_health.service_summary.enabled_services | int > 20 else '',
              'Implement service monitoring and alerting' if diagnosis_data.service_analysis.service_health.service_health.service_summary.active_services | int > 30 else ''
            ] | select('string') | list,
            'service_management': [
              'Review and optimize service startup sequence',
              'Implement service health monitoring',
              'Set up service dependency management',
              'Regular service log analysis and cleanup',
              'Create service backup and recovery procedures'
            ],
            'preventive_measures': [
              'Monitor filesystem usage and growth',
              'Regular log rotation and cleanup',
              'Implement system backup strategy',
              'Monitor network traffic patterns',
              'Service health check automation',
              'Performance baseline establishment'
            ]
          }
        }) }}"

    - name: Print Comprehensive JSON Output
      debug:
        msg: "{{ diagnosis_data | to_json }}"

    - name: Save comprehensive JSON output to file
      copy:
        content: "{{ diagnosis_data | to_nice_json }}"
        dest: "{{ diagnosis_output_file }}"
        mode: '0644'