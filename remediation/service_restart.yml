---
- name: Service Restart Remediation
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  gather_facts: yes
  vars:
    max_restart_attempts: "{{ max_attempts | default(3) }}"
    restart_delay: "{{ delay | default(5) }}"
    # Use vault variables for authentication if needed
    # ansible_ssh_pass: "{{ ansible_ssh_pass | default(omit) }}"
    # ansible_become_pass: "{{ ansible_become_pass | default(omit) }}"

  tasks:
    - name: Validate input parameters
      fail:
        msg: "No service name provided. Please specify service_to_restart parameter."
      when: service_to_restart is not defined or service_to_restart == ''

    - name: Debug OS information
      debug:
        msg: 
          - "OS Family: {{ ansible_facts['os_family'] }}"
          - "Distribution: {{ ansible_facts['distribution'] }}"
          - "Distribution Version: {{ ansible_facts['distribution_version'] }}"

    - name: Debug service name
      debug:
        msg: "Service to be restarted: {{ service_to_restart }}"
        verbosity: 0

    - name: Get service status (Linux)
      ansible.builtin.service_facts:
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Check if service exists (Linux)
      debug:
        msg: "Service status before restart: {{ ansible_facts.services[service_to_restart + '.service'].state }}"
      when: 
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']
        - service_to_restart + '.service' in ansible_facts.services
      register: service_check

    - name: Collect service status before restart
      shell: "systemctl status {{ service_to_restart }} || true"
      register: service_status_before
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Display service status before restart
      debug:
        msg: "{{ service_status_before.stdout_lines }}"
      when: service_status_before is defined

    - name: Pre-flight service health check
      block:
        - name: Check if any process is using common service ports
          shell: |
            echo "=== Port Usage Check for {{ service_to_restart }} ==="
            case "{{ service_to_restart }}" in
              httpd|apache2)
                echo "Checking web server ports 80 and 443:"
                netstat -tulpn | grep -E ':(80|443)\s' || echo "Ports 80/443 are free"
                ;;
              nginx)
                echo "Checking web server ports 80 and 443:"
                netstat -tulpn | grep -E ':(80|443)\s' || echo "Ports 80/443 are free"
                ;;
              ssh|sshd)
                echo "Checking SSH port 22:"
                netstat -tulpn | grep :22 || echo "Port 22 is free"
                ;;
              mysql|mysqld|mariadb)
                echo "Checking MySQL/MariaDB port 3306:"
                netstat -tulpn | grep :3306 || echo "Port 3306 is free"
                ;;
              postgresql|postgres)
                echo "Checking PostgreSQL port 5432:"
                netstat -tulpn | grep :5432 || echo "Port 5432 is free"
                ;;
              redis)
                echo "Checking Redis port 6379:"
                netstat -tulpn | grep :6379 || echo "Port 6379 is free"
                ;;
              docker)
                echo "Checking Docker port 2376:"
                netstat -tulpn | grep :2376 || echo "Port 2376 is free"
                ;;
              *)
                echo "No specific port check configured for {{ service_to_restart }}"
                echo "Checking for any processes with this service name:"
                ps aux | grep "{{ service_to_restart }}" | grep -v grep || echo "No {{ service_to_restart }} processes found"
                ;;
            esac
          register: port_check

        - name: Display port check results
          debug:
            msg: "{{ port_check.stdout_lines }}"

        - name: Check system resources
          shell: |
            echo "=== System Resource Check ==="
            echo "Memory usage:"
            free -h
            echo "Disk space:"
            df -h
            echo "Load average:"
            uptime
          register: resource_check

        - name: Display resource check
          debug:
            msg: "{{ resource_check.stdout_lines }}"

        - name: Check service dependencies
          shell: |
            echo "=== Service Dependencies Check ==="
            echo "Checking service dependencies for {{ service_to_restart }}:"
            systemctl list-dependencies {{ service_to_restart }} --plain | head -10 || echo "Could not list dependencies"
            echo "Checking if service is enabled:"
            systemctl is-enabled {{ service_to_restart }} || echo "Service enablement status unknown"
          register: dependency_check

        - name: Display dependency check
          debug:
            msg: "{{ dependency_check.stdout_lines }}"
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Attempt service restart (Linux)
      block:
        - name: Restart service {{ service_to_restart }}
          ansible.builtin.service:
            name: "{{ service_to_restart }}"
            state: restarted
          register: service_restart
          retries: "{{ max_restart_attempts }}"
          delay: "{{ restart_delay }}"
          until: service_restart is not failed
      rescue:
        - name: Collect service logs on failure
          shell: "journalctl -u {{ service_to_restart }} -n 50 --no-pager"
          register: service_logs

        - name: Display service logs
          debug:
            msg: "{{ service_logs.stdout_lines }}"

        - name: Display detailed service status
          shell: "systemctl status {{ service_to_restart }} -l --no-pager"
          register: detailed_status

        - name: Show detailed status
          debug:
            msg: "{{ detailed_status.stdout_lines }}"

        - name: Generic service recovery attempts
          block:
            - name: Check for common service issues
              shell: |
                echo "=== Generic Service Diagnostics for {{ service_to_restart }} ==="
                echo "1. Checking service configuration files:"
                find /etc -name "*{{ service_to_restart }}*" -type f 2>/dev/null | head -5 || echo "No config files found"
                echo "2. Checking service binary/executable:"
                which {{ service_to_restart }} 2>/dev/null || echo "Service binary not found in PATH"
                echo "3. Checking service user/group (if applicable):"
                id {{ service_to_restart }} 2>/dev/null || echo "No dedicated service user"
                echo "4. Checking SELinux context (if applicable):"
                getenforce 2>/dev/null || echo "SELinux not available"
                echo "5. Checking recent system messages:"
                tail -10 /var/log/messages 2>/dev/null || echo "System messages not accessible"
              register: generic_diagnostics

            - name: Display generic diagnostics
              debug:
                msg: "{{ generic_diagnostics.stdout_lines }}"

            - name: Attempt to start service instead of restart
              ansible.builtin.service:
                name: "{{ service_to_restart }}"
                state: started
              register: service_start_attempt
              ignore_errors: yes

            - name: Display start attempt result
              debug:
                msg: 
                  - "Service start attempt result: {{ 'SUCCESS' if service_start_attempt is not failed else 'FAILED' }}"
                  - "{{ service_start_attempt.msg | default('No additional message') }}"

            - name: Check service status after start attempt
              shell: "systemctl is-active {{ service_to_restart }}"
              register: post_start_status
              ignore_errors: yes

            - name: Display post-start status
              debug:
                msg: "Service status after start attempt: {{ post_start_status.stdout | default('unknown') }}"

        - name: Final failure message
          fail:
            msg: |
              Service restart failed for {{ service_to_restart }}.
              Please check the logs and diagnostics above for details.
              Common issues to investigate:
              1. Configuration file syntax errors
              2. Port conflicts with other services
              3. Insufficient permissions or SELinux issues
              4. Missing dependencies or files
              5. Disk space or memory issues
              6. Service-specific requirements not met
              
              Next steps:
              - Review the service logs: journalctl -u {{ service_to_restart }}
              - Check service status: systemctl status {{ service_to_restart }}
              - Verify configuration files
              - Check system resources and dependencies

    - name: Verify service is running
      ansible.builtin.service:
        name: "{{ service_to_restart }}"
        state: started
      register: final_status

    - name: Display final service status
      debug:
        msg: "Final service status: {{ final_status }}"
      when: final_status is defined

    - name: Restart service on Windows
      win_service:
        name: "{{ service_name }}"
        state: restarted
      when: ansible_facts['os_family'] == "Windows"
      register: windows_restart

    - name: Verify service status after restart (Windows)
      win_service:
        name: "{{ service_name }}"
        state: started
      when: ansible_facts['os_family'] == "Windows"
