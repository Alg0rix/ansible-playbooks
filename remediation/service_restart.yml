---
- name: Service Restart Remediation
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  gather_facts: yes
  vars:
    max_restart_attempts: "{{ max_attempts | default(3) }}"
    restart_delay: "{{ delay | default(5) }}"

  tasks:
    - name: Validate input parameters
      fail:
        msg: "No service name provided. Please specify service_to_restart parameter."
      when: service_to_restart is not defined or service_to_restart == ''

    - name: Debug OS information
      debug:
        msg: 
          - "OS Family: {{ ansible_facts['os_family'] }}"
          - "Distribution: {{ ansible_facts['distribution'] }}"
          - "Distribution Version: {{ ansible_facts['distribution_version'] }}"

    - name: Debug service name
      debug:
        msg: "Service to be restarted: {{ service_to_restart }}"
        verbosity: 0

    - name: Get service status (Linux)
      ansible.builtin.service_facts:
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Check if service exists (Linux)
      debug:
        msg: "Service status before restart: {{ ansible_facts.services[service_to_restart + '.service'].state }}"
      when: 
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']
        - service_to_restart + '.service' in ansible_facts.services
      register: service_check

    - name: Collect service status before restart
      shell: "systemctl status {{ service_to_restart }} || true"
      register: service_status_before
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Display service status before restart
      debug:
        msg: "{{ service_status_before.stdout_lines }}"
      when: service_status_before is defined

    - name: Attempt service restart (Linux)
      block:
        - name: Restart service {{ service_to_restart }}
          ansible.builtin.service:
            name: "{{ service_to_restart }}"
            state: restarted
          register: service_restart
          retries: "{{ max_restart_attempts }}"
          delay: "{{ restart_delay }}"
          until: service_restart is not failed
      rescue:
        - name: Collect service logs on failure
          shell: "journalctl -u {{ service_to_restart }} -n 50 --no-pager"
          register: service_logs

        - name: Display service logs
          debug:
            msg: "{{ service_logs.stdout_lines }}"

        - name: Display detailed service status
          shell: "systemctl status {{ service_to_restart }} -l --no-pager"
          register: detailed_status

        - name: Show detailed status
          debug:
            msg: "{{ detailed_status.stdout_lines }}"

        - name: Fail with detailed message
          fail:
            msg: "Service restart failed. Please check the logs above for details."

    - name: Verify service is running
      ansible.builtin.service:
        name: "{{ service_to_restart }}"
        state: started
      register: final_status

    - name: Display final service status
      debug:
        msg: "Final service status: {{ final_status }}"
      when: final_status is defined

    - name: Restart service on Windows
      win_service:
        name: "{{ service_name }}"
        state: restarted
      when: ansible_facts['os_family'] == "Windows"
      register: windows_restart

    - name: Verify service status after restart (Windows)
      win_service:
        name: "{{ service_name }}"
        state: started
      when: ansible_facts['os_family'] == "Windows"
