---
- name: Service Restart Remediation
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  gather_facts: yes
  vars:
    service_to_restart: "{{ service_to_restart | default('') }}"
    service_name: "{{ service_to_restart }}"

  tasks:
    - name: Validate service name
      fail:
        msg: "No service name provided. Please specify service_to_restart variable."
      when: service_to_restart | length == 0

    - name: Debug OS information
      debug:
        msg: 
          - "OS Family: {{ ansible_facts['os_family'] }}"
          - "Distribution: {{ ansible_facts['distribution'] }}"
          - "Distribution Version: {{ ansible_facts['distribution_version'] }}"

    - name: Debug service name
      debug:
        msg: "Service to be restarted: {{ service_name }}"
        verbosity: 0

    - name: Get service status (Linux)
      ansible.builtin.service_facts:
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Restart service on Linux
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']
      register: linux_restart

    - name: Restart service on Windows
      win_service:
        name: "{{ service_name }}"
        state: restarted
      when: ansible_facts['os_family'] == "Windows"
      register: windows_restart

    - name: Verify service status after restart (Linux)
      ansible.builtin.service:
        name: "{{ service_name }}"
        state: started
      when: ansible_facts['os_family'] in ['RedHat', 'Debian', 'SUSE']

    - name: Verify service status after restart (Windows)
      win_service:
        name: "{{ service_name }}"
        state: started
      when: ansible_facts['os_family'] == "Windows"
