---
- name: Test credentials and detect OS
  hosts: "{{target_hosts}}"
  gather_facts: no
  
  tasks:
    # Test for Windows first (simpler check)
    - name: Test for Windows
      raw: "echo OS_TYPE:WINDOWS && ver"
      register: windows_test
      ignore_errors: yes

    # Test for Linux if Windows failed
    - name: Test for Linux  
      raw: "echo OS_TYPE:LINUX && uname -s"
      register: linux_test
      ignore_errors: yes
      when: windows_test.rc != 0

    # JSON output with OS detection
    - name: Output test result
      debug:
        msg: "{{ result_json | to_json }}"
      vars:
        result_json:
          hostname: "{{ inventory_hostname }}"
          ip: "{{ ansible_host | default(inventory_hostname) }}"
          os_type: "{{ detected_os }}"
          status: "{{ connection_status }}"
          details: "{{ connection_details }}"
        
        # Determine OS based on successful test
        detected_os: |
          {%- if windows_test.rc == 0 -%}
          windows
          {%- elif linux_test is defined and linux_test.rc == 0 -%}
          linux
          {%- else -%}
          unknown
          {%- endif -%}
        
        # Connection status
        connection_status: |
          {%- if windows_test.rc == 0 or (linux_test is defined and linux_test.rc == 0) -%}
          success
          {%- else -%}
            {%- set failed_test = windows_test if windows_test.rc != 0 else linux_test -%}
            {%- if 'Permission denied' in failed_test.stderr or 'Authentication failed' in failed_test.stderr or 'Invalid user' in failed_test.stderr -%}
            auth_failed
            {%- elif 'Connection refused' in failed_test.stderr or 'No route to host' in failed_test.stderr -%}
            connection_refused
            {%- elif 'Connection timed out' in failed_test.stderr or 'Host is unreachable' in failed_test.stderr -%}
            connection_timeout
            {%- elif 'Name or service not known' in failed_test.stderr -%}
            dns_failed
            {%- else -%}
            failed
            {%- endif -%}
          {%- endif -%}
        
        # Connection details
        connection_details: |
          {%- if windows_test.rc == 0 -%}
          {{ windows_test.stdout | regex_replace('[\r\n\x1b\[\d+[A-Za-z]]', ' ') | regex_replace('\s+', ' ') | trim }}
          {%- elif linux_test is defined and linux_test.rc == 0 -%}
          {{ linux_test.stdout | regex_replace('[\r\n]', ' ') | trim }}
          {%- else -%}
          {{ windows_test.stderr | default('Connection failed') | regex_replace('[\r\n]', ' ') | trim }}
          {%- endif -%}