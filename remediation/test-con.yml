---
- name: Test credentials and detect OS
  hosts: "{{target_hosts}}"
  gather_facts: no
  
  tasks:
    # Test SSH connection and detect OS
    - name: Test SSH connection and detect OS
      raw: |
        if command -v uname >/dev/null 2>&1; then
          echo "OS_TYPE:LINUX"
          echo "STATUS:SUCCESS"
          uname -a
        elif command -v systeminfo >/dev/null 2>&1; then
          echo "OS_TYPE:WINDOWS" 
          echo "STATUS:SUCCESS"
          systeminfo | findstr /C:"OS Name" | head -1
        elif [ -f /proc/version ]; then
          echo "OS_TYPE:LINUX"
          echo "STATUS:SUCCESS"
          cat /proc/version
        elif exist C:\Windows\System32\cmd.exe 2>nul; then
          echo "OS_TYPE:WINDOWS"
          echo "STATUS:SUCCESS"
          ver
        else
          echo "OS_TYPE:UNKNOWN"
          echo "STATUS:SUCCESS"
          echo "Connected but cannot determine OS"
        fi
      register: ssh_test
      ignore_errors: yes

    # JSON output with OS detection
    - name: Output test result
      debug:
        msg: "{{ result_json | to_json }}"
      vars:
        result_json:
          hostname: "{{ inventory_hostname }}"
          ip: "{{ ansible_host | default(inventory_hostname) }}"
          os_type: "{{ detected_os }}"
          status: "{{ connection_status }}"
          details: "{{ connection_details }}"
        
        # Extract OS type from command output
        detected_os: |
          {%- if ssh_test.rc is defined and ssh_test.rc == 0 -%}
            {%- if 'OS_TYPE:LINUX' in ssh_test.stdout -%}
            linux
            {%- elif 'OS_TYPE:WINDOWS' in ssh_test.stdout -%}
            windows
            {%- else -%}
            unknown
            {%- endif -%}
          {%- else -%}
          failed_to_connect
          {%- endif -%}
        
        # Connection status
        connection_status: |
          {%- if ssh_test.rc is defined and ssh_test.rc == 0 -%}
          success
          {%- elif 'Permission denied' in ssh_test.stderr or 'Authentication failed' in ssh_test.stderr or 'Invalid user' in ssh_test.stderr -%}
          auth_failed
          {%- elif 'Connection refused' in ssh_test.stderr or 'No route to host' in ssh_test.stderr -%}
          connection_refused
          {%- elif 'Connection timed out' in ssh_test.stderr or 'Host is unreachable' in ssh_test.stderr -%}
          connection_timeout
          {%- elif 'Name or service not known' in ssh_test.stderr -%}
          dns_failed
          {%- else -%}
          failed
          {%- endif -%}
        
        # Connection details
        connection_details: |
          {%- if ssh_test.rc is defined and ssh_test.rc == 0 -%}
          {{ ssh_test.stdout | regex_replace('\n', ' ') | trim }}
          {%- else -%}
          {{ ssh_test.stderr | default('SSH connection failed') | regex_replace('\n', ' ') | trim }}
          {%- endif -%}